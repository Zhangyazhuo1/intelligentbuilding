{"remainingRequest":"C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\src\\components\\Home.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\src\\components\\Home.vue","mtime":1628656001812},{"path":"C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2NvbnRhaW5lciB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKfQo="},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyGA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div id=\"container\"></div>\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three/build/three.module'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\n\nexport default {\n  data () {\n    return {\n      camera: null,\n      scene: null,\n      renderer: null,\n      mesh: null,\n      controls: null,\n      clock: null\n    }\n  },\n  mounted () {\n    this.init()\n    this.animate()\n  },\n  methods: {\n    // 初始化\n    init () {\n      // 创建场景对象Scene\n      this.container = document.getElementById('container')\n      this.container.style.height = window.innerHeight + 'px'\n      this.scene = new THREE.Scene()\n      this.scene.background = new THREE.Color(0xbfd1e5)\n\n      // 创建渲染器对象\n      this.renderer = new THREE.WebGLRenderer({ antialias: true })\n      this.renderer.setSize(this.container.clientWidth, this.container.clientHeight)\n      this.renderer.setPixelRatio(window.devicePixelRatio)\n      this.container.appendChild(this.renderer.domElement)\n\n      // 相机设置\n      const fov = 45\n      const aspect = 2\n      const near = 0.1\n      const far = 100\n      this.container = document.getElementById('container')\n      this.camera = new THREE.PerspectiveCamera(\n        fov, aspect, near, far\n      )\n      this.camera.position.set(15, 10, 20) // 设置相机位置\n\n      // 光源设置\n      // 点光源\n      let point = new THREE.PointLight(0xffffff)\n      point.position.set(400, 200, 300) // 点光源位置\n      this.scene.add(point) // 点光源添加到场景中\n      // 环境光\n      let ambient = new THREE.AmbientLight(0x444444)\n      this.scene.add(ambient)\n\n      this.clock = new THREE.Clock()\n      // onresize 事件会在窗口被调整大小时发生\n      window.onresize = () => {\n        // 重置渲染器输出画布canvas尺寸\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\n        // 全屏情况下：设置观察范围长宽比aspect为窗口宽高比\n        this.camera.aspect = window.innerWidth / window.innerHeight\n        // 渲染器执行render方法的时候会读取相机对象的投影矩阵属性projectionMatrix\n        // 但是不会每渲染一帧，就通过相机的属性计算投影矩阵(节约计算资源)\n        // 如果相机的一些属性发生了变化，需要执行updateProjectionMatrix ()方法更新相机的投影矩阵\n        this.camera.updateProjectionMatrix()\n      }\n\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n      this.controls.target.set(5, 0, -10)\n      this.controls.update()\n\n      // 模型加载\n      this.objectLoader('/static/4楼墙体/4楼墙体.gltf')\n    },\n    // 动画\n    animate () {\n      requestAnimationFrame(this.animate)\n      this.renderer.render(this.scene, this.camera)\n    },\n    // 模型加载\n    objectLoader (url) {\n      const gltfLoader = new GLTFLoader()\n      gltfLoader.load(url, (gltf) => {\n        const obj = gltf.scene\n        obj.position.x = 0\n        obj.position.y = 0\n        obj.position.z = 0\n        obj.scale.x = 0.2\n        obj.scale.y = 0.2\n        obj.scale.z = 0.2\n        this.scene.add(obj)\n      })\n    }\n  }\n}\n</script>\n\n<style>\n#container {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n</style>\n"]}]}