{"remainingRequest":"C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\src\\components\\Home.vue?vue&type=style&index=0&id=8dc7cce2&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\src\\components\\Home.vue","mtime":1628405606208},{"path":"C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lzq\\WebstormProjects\\intelligentbuilding\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNjIHsKICBtYXJnaW46IDA7CiAgaGVpZ2h0OiAxMDAlOwogIHdpZHRoOiAxMDAlOwogIGRpc3BsYXk6IGJsb2NrOwp9Cg=="},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoJA;AACA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <canvas id=\"c\"></canvas>\n    <button>this is a button</button>\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nexport default {\n  data () {\n    return {\n      root: null,\n      camera: null,\n      scene: '',\n      mush: null,\n      loader: null,\n      mixer: null,\n      clock: new THREE.Clock(),\n      controls: null\n    }\n  },\n  mounted () {\n    this.init()\n  },\n  methods: {\n    change () {\n      this.scene.remove(this.root)\n    },\n    frameArea (sizeToFitOnScreen, boxSize, boxCenter, camera) {\n      const halfSizeToFitOnScreen = sizeToFitOnScreen * 0.5\n      const halfFovY = THREE.MathUtils.degToRad(camera.fov * 0.5)\n      const distance = halfSizeToFitOnScreen / Math.tan(halfFovY)\n      // compute a unit vector that points in the direction the camera is now\n      // in the xz plane from the center of the box\n      const direction = (new THREE.Vector3())\n        .subVectors(camera.position, boxCenter)\n        .multiply(new THREE.Vector3(1, 0, 1))\n        .normalize()\n\n      // move the camera to a position distance units way from the center\n      // in whatever direction the camera was from the center already\n      camera.position.copy(direction.multiplyScalar(distance).add(boxCenter))\n\n      // pick some near and far values for the frustum that\n      // will contain the box.\n      camera.near = boxSize / 100\n      camera.far = boxSize * 100\n\n      camera.updateProjectionMatrix()\n\n      // point the camera to look at the center of the box\n      camera.lookAt(boxCenter.x, boxCenter.y, boxCenter.z)\n    },\n    init () {\n      const canvas = document.querySelector('#c')\n      const renderer = new THREE.WebGLRenderer({ canvas })\n\n      const fov = 45\n      const aspect = 2 // the canvas default\n      const near = 0.1\n      const far = 100\n      const camera = new THREE.PerspectiveCamera(fov, aspect, near, far)\n      camera.position.set(0, 10, 20)\n\n      const controls = new OrbitControls(camera, canvas)\n      controls.target.set(0, 5, 0)\n      controls.update()\n\n      this.scene = new THREE.Scene()\n      this.scene.background = new THREE.Color('white')\n\n      // 添加灯源\n      {\n        const skyColor = 0xB1E1FF // light blue\n        const groundColor = 0xB97A20 // brownish orange\n        const intensity = 1\n        const light = new THREE.HemisphereLight(skyColor, groundColor, intensity)\n        this.scene.add(light)\n      }\n\n      {\n        const color = 0xFFFFFF\n        const intensity = 1\n        const light = new THREE.DirectionalLight(color, intensity)\n        light.position.set(5, 10, 2)\n        this.scene.add(light)\n        this.scene.add(light.target)\n      }\n\n      // 加载模型\n      {\n        const gltfLoader = new GLTFLoader()\n        gltfLoader.load('/static/4楼墙体/4楼墙体.gltf', (gltf) => {\n          this.root = gltf.scene.children[0]\n          this.scene.add(gltf.scene.children[0])\n\n          // compute the box that contains all the stuff\n          // from root and below\n          const box = new THREE.Box3().setFromObject(this.root)\n\n          const boxSize = box.getSize(new THREE.Vector3()).length()\n          const boxCenter = box.getCenter(new THREE.Vector3())\n\n          // set the camera to frame the box\n          this.frameArea(boxSize * 0.5, boxSize, boxCenter, camera)\n\n          // update the Trackball controls to handle the new size\n          controls.maxDistance = boxSize * 10\n          controls.target.copy(boxCenter)\n          controls.update()\n        })\n      }\n\n      function resizeRendererToDisplaySize (renderer) {\n        const canvas = renderer.domElement\n        const width = canvas.clientWidth\n        const height = canvas.clientHeight\n        const needResize = canvas.width !== width || canvas.height !== height\n        if (needResize) {\n          renderer.setSize(width, height, false)\n        }\n        return needResize\n      }\n\n      function render () {\n        if (resizeRendererToDisplaySize(renderer)) {\n          const canvas = renderer.domElement\n          camera.aspect = canvas.clientWidth / canvas.clientHeight\n          camera.updateProjectionMatrix()\n        }\n\n        const scene = this.scene\n        renderer.render(scene, camera)\n\n        requestAnimationFrame(render)\n      }\n\n      requestAnimationFrame(render)\n    }\n  }\n}\n</script>\n\n<style scoped>\n#c {\n  margin: 0;\n  height: 100%;\n  width: 100%;\n  display: block;\n}\n</style>\n"]}]}